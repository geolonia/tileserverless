service: tileserverless
variablesResolutionMode: 20210219

frameworkVersion: ">=2.14.0 <3.0.0"

package:
  exclude:
    - .git/**
    - src/**
    - docs/**
    - .*
    - tsconfig.*
    - package-lock.json
    - yarn.lock
    - README.md
    - serverless.yml

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 128
  region: ap-northeast-1
  apiGateway:
    shouldStartNameWithService: true # serverless@^2

  versionFunctions: false
  logRetentionInDays: 30
  lambdaHashingVersion: "20201221"
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
      allowedMethods:
        - GET
      maxAge: 6000
  vpc:
    securityGroupIds:
      !Split
        - ","
        - ${self:custom.sgId}
    subnetIds:
      !Split
        - ","
        - ${self:custom.subnetId}
  environment:
    MOUNT_PATH: ${self:custom.mountPath}
    TILES_VERSION_DNS_NAME: ${self:custom.TILES_VERSION_DNS_NAME}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "elasticfilesystem:ClientMount"
            - "elasticfilesystem:ClientWrite"
          Resource:
            - ${self:custom.efsApArn}

custom:
  sgId: ${env:TILESERVERLESS_SECURITY_GROUP_ID}
  subnetId: ${env:TILESERVERLESS_SUBNET_ID}
  accessPointId: ${env:TILESERVERLESS_FILESYSTEM_ACCESS_POINT_ID}
  fsId: ${env:TILESERVERLESS_FILESYSTEM_ID}
  mountPath: /mnt/efs
  TILES_VERSION_DNS_NAME: ${env:TILESERVERLESS_TILES_VERSION_DNS_NAME}
  efsApArn:
    Fn::Join:
      - ":"
      - - arn:aws:elasticfilesystem
        - ${self:provider.region}
        - !Ref AWS::AccountId
        - access-point/${self:custom.accessPointId}

resources:
  Resources:
    CDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            !Split
              - ","
              - ${env:CLOUDFRONT_DOMAIN_NAME}
          Comment: "[${self:provider.stage}] CDN for tileserverless"
          CustomErrorResponses:
            - ErrorCachingMinTTL: 30
              ErrorCode: 404
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            TargetOriginId: "tileserverless"
            CachePolicyId: !Ref CDNTilesCachePolicy
            OriginRequestPolicyId: !Ref CDNTilesORPolicy
            TrustedKeyGroups:
              !Split
                - ","
                - ${env:TRUSTED_KEY_GROUPS}
            ViewerProtocolPolicy: "redirect-to-https"
          Enabled: true
          HttpVersion: "http2"
          IPV6Enabled: true
          Origins:
            - Id: "tileserverless"
              CustomOriginConfig:
                OriginKeepaliveTimeout: 60
                OriginProtocolPolicy: "https-only"
              DomainName: !Join
                - "."
                - - !Ref HttpApi
                  - "execute-api"
                  - !Ref "AWS::Region"
                  - "amazonaws.com"
          PriceClass: "PriceClass_All"
          Logging:
            Bucket: ${env:CLOUDFRONT_LOGS_BUCKET}.s3.amazonaws.com
            IncludeCookies: false
            Prefix: new/
          ViewerCertificate:
            AcmCertificateArn: ${env:CLOUDFRONT_ACM_CERTIFICATE_ARN}
            MinimumProtocolVersion: "TLSv1.2_2019"
            SslSupportMethod: "sni-only"

    CDNTilesCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: "${self:provider.stage}-tileserverless-default"
          DefaultTTL: 300
          MaxTTL: 86400
          MinTTL: 0
          ParametersInCacheKeyAndForwardedToOrigin:
            EnableAcceptEncodingGzip: false
            EnableAcceptEncodingBrotli: false
            CookiesConfig:
              CookieBehavior: "none"
            HeadersConfig:
              HeaderBehavior: "none"
            QueryStringsConfig:
              QueryStringBehavior: "none"


    CDNTilesORPolicy:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
          Name: "${self:provider.stage}-tileserverless-default"
          CookiesConfig:
            CookieBehavior: "none"
          HeadersConfig:
            HeaderBehavior: "none"
          QueryStringsConfig:
            QueryStringBehavior: "none"

  extensions:
    TileLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: ${self:custom.efsApArn}
            LocalMountPath: ${self:custom.mountPath}
    MetaLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: ${self:custom.efsApArn}
            LocalMountPath: ${self:custom.mountPath}

functions:
  tile:
    handler: dist/tile.handler
    events:
      - httpApi:
          # Remove .mvt extension with Lambda
          path: "/{ver}/tiles/{z}/{x}/{y}"
          method: get

  meta:
    handler: dist/meta.handler
    events:
      - httpApi:
          path: "/{ver}/tiles.json"
          method: get
